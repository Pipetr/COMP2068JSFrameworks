{{#section 'styles'}}
<style>
  .reports-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  
  .reports-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    border-radius: 10px;
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .summary-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
    text-align: center;
  }
  
  .summary-card .icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }
  
  .summary-card .value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 0.25rem;
  }
  
  .summary-card .label {
    color: #7f8c8d;
    font-size: 0.9rem;
  }
  
  .chart-container {
    background: white;
    border-radius: 10px;
    padding: 2rem;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
  }
  
  .chart-header {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .chart-title {
    font-size: 1.25rem;
    font-weight: bold;
    color: #2c3e50;
  }
  
  .chart-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .chart-canvas {
    position: relative;
    height: 400px;
  }
  
  .filters-section {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
  }
  
  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    align-items: end;
  }
  
  .form-group {
    margin-bottom: 0;
  }
  
  .form-label {
    font-weight: 500;
    color: #2c3e50;
    margin-bottom: 0.5rem;
  }
  
  .btn {
    padding: 0.5rem 1rem;
    border-radius: 5px;
    font-weight: 500;
  }
  
  @media (max-width: 768px) {
    .chart-controls {
      justify-content: center;
    }
    
    .chart-header {
      text-align: center;
    }
  }
</style>
{{/section}}

<div class="container-fluid">
  <div class="reports-container">
    <div class="reports-header">
      <h1><i class="fas fa-chart-bar me-2"></i>Work Reports & Analytics</h1>
      <p class="mb-0">Visualize your work patterns and earnings</p>
    </div>

    {{#if error}}
      <div class="alert alert-danger" role="alert">
        {{error}}
      </div>
    {{/if}}

    <!-- Filters Section -->
    <div class="filters-section">
      <h5><i class="fas fa-filter me-2"></i>Filters</h5>
      <form id="filtersForm" class="filters-grid">
        <div class="form-group">
          <label for="startDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="startDate" name="startDate" value="{{dateRange.start}}">
        </div>
        <div class="form-group">
          <label for="endDate" class="form-label">End Date</label>
          <input type="date" class="form-control" id="endDate" name="endDate" value="{{dateRange.end}}">
        </div>
        <div class="form-group">
          <label for="projectFilter" class="form-label">Project</label>
          <select class="form-control" id="projectFilter" name="projectFilter">
            <option value="all">All Projects</option>
            {{#each projects}}
              <option value="{{this._id}}">{{this.name}}</option>
            {{/each}}
          </select>
        </div>
        <div class="form-group">
          <button type="button" class="btn btn-primary" onclick="updateCharts()">
            <i class="fas fa-sync me-2"></i>Update Charts
          </button>
        </div>
      </form>
    </div>

    <!-- Summary Cards -->
    <div class="summary-cards">
      <div class="summary-card">
        <div class="icon text-primary">
          <i class="fas fa-clock"></i>
        </div>
        <div class="value" id="totalHours">{{totalHours}}</div>
        <div class="label">Total Hours</div>
      </div>
      <div class="summary-card">
        <div class="icon text-success">
          <i class="fas fa-dollar-sign"></i>
        </div>
        <div class="value" id="totalEarnings">${{totalEarnings}}</div>
        <div class="label">Total Earnings</div>
      </div>
      <div class="summary-card">
        <div class="icon text-info">
          <i class="fas fa-tasks"></i>
        </div>
        <div class="value" id="totalEntries">{{entriesCount}}</div>
        <div class="label">Work Entries</div>
      </div>
      <div class="summary-card">
        <div class="icon text-warning">
          <i class="fas fa-calculator"></i>
        </div>
        <div class="value" id="avgHourly">${{avgHourly}}</div>
        <div class="label">Avg Hourly Rate</div>
      </div>
    </div>

    <!-- Project Distribution Chart -->
    <div class="chart-container">
      <div class="chart-header">
        <div class="chart-title">
          <i class="fas fa-pie-chart me-2"></i>Hours by Project
        </div>
        <div class="chart-controls">
          <button type="button" class="btn btn-sm btn-outline-primary" onclick="toggleChartType('projectHours', 'pie')">
            <i class="fas fa-chart-pie"></i> Pie
          </button>
          <button type="button" class="btn btn-sm btn-outline-primary" onclick="toggleChartType('projectHours', 'bar')">
            <i class="fas fa-chart-bar"></i> Bar
          </button>
        </div>
      </div>
      <div class="chart-canvas">
        <canvas id="projectHoursChart"></canvas>
      </div>
    </div>

    <!-- Earnings Distribution Chart -->
    <div class="chart-container">
      <div class="chart-header">
        <div class="chart-title">
          <i class="fas fa-dollar-sign me-2"></i>Earnings by Project
        </div>
        <div class="chart-controls">
          <button type="button" class="btn btn-sm btn-outline-success" onclick="toggleChartType('projectEarnings', 'doughnut')">
            <i class="fas fa-chart-pie"></i> Doughnut
          </button>
          <button type="button" class="btn btn-sm btn-outline-success" onclick="toggleChartType('projectEarnings', 'bar')">
            <i class="fas fa-chart-bar"></i> Bar
          </button>
        </div>
      </div>
      <div class="chart-canvas">
        <canvas id="projectEarningsChart"></canvas>
      </div>
    </div>

    <!-- Time Series Chart -->
    <div class="chart-container">
      <div class="chart-header">
        <div class="chart-title">
          <i class="fas fa-chart-line me-2"></i>Daily Work Pattern
        </div>
        <div class="chart-controls">
          <button type="button" class="btn btn-sm btn-outline-info" onclick="toggleMetric('hours')">
            <i class="fas fa-clock"></i> Hours
          </button>
          <button type="button" class="btn btn-sm btn-outline-info" onclick="toggleMetric('earnings')">
            <i class="fas fa-dollar-sign"></i> Earnings
          </button>
        </div>
      </div>
      <div class="chart-canvas">
        <canvas id="timeSeriesChart"></canvas>
      </div>
    </div>
  </div>
</div>

{{#section 'scripts'}}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  let projectHoursChart, projectEarningsChart, timeSeriesChart;
  let currentMetric = 'hours';
  
  // Initial data from server
  let projectStats = {{{projectStats}}};
  let dailyStats = {{{dailyStats}}};
  
  // Color palette for charts
  const colors = [
    '#667eea', '#764ba2', '#f093fb', '#f5576c',
    '#4facfe', '#00f2fe', '#43e97b', '#38f9d7',
    '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3'
  ];
  
  function initCharts() {
    createProjectHoursChart();
    createProjectEarningsChart();
    createTimeSeriesChart();
  }
  
  function createProjectHoursChart() {
    const ctx = document.getElementById('projectHoursChart').getContext('2d');
    
    const projects = Object.keys(projectStats);
    const hours = projects.map(project => projectStats[project].hours.toFixed(2));
    
    if (projectHoursChart) {
      projectHoursChart.destroy();
    }
    
    projectHoursChart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: projects,
        datasets: [{
          data: hours,
          backgroundColor: colors.slice(0, projects.length),
          borderWidth: 2,
          borderColor: '#fff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right'
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return context.label + ': ' + context.parsed + ' hours';
              }
            }
          }
        }
      }
    });
  }
  
  function createProjectEarningsChart() {
    const ctx = document.getElementById('projectEarningsChart').getContext('2d');
    
    const projects = Object.keys(projectStats);
    const earnings = projects.map(project => projectStats[project].earnings.toFixed(2));
    
    if (projectEarningsChart) {
      projectEarningsChart.destroy();
    }
    
    projectEarningsChart = new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: projects,
        datasets: [{
          data: earnings,
          backgroundColor: colors.slice(0, projects.length),
          borderWidth: 2,
          borderColor: '#fff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right'
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                return context.label + ': $' + context.parsed;
              }
            }
          }
        }
      }
    });
  }
  
  function createTimeSeriesChart() {
    const ctx = document.getElementById('timeSeriesChart').getContext('2d');
    
    const dates = Object.keys(dailyStats).sort();
    const data = dates.map(date => dailyStats[date][currentMetric]);
    
    if (timeSeriesChart) {
      timeSeriesChart.destroy();
    }
    
    timeSeriesChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: dates.map(date => new Date(date).toLocaleDateString()),
        datasets: [{
          label: currentMetric === 'hours' ? 'Hours' : 'Earnings ($)',
          data: data,
          borderColor: '#667eea',
          backgroundColor: 'rgba(102, 126, 234, 0.1)',
          borderWidth: 2,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: currentMetric === 'hours' ? 'Hours' : 'Earnings ($)'
            }
          },
          x: {
            title: {
              display: true,
              text: 'Date'
            }
          }
        },
        plugins: {
          tooltip: {
            callbacks: {
              label: function(context) {
                const suffix = currentMetric === 'hours' ? ' hours' : '';
                const prefix = currentMetric === 'earnings' ? '$' : '';
                return prefix + context.parsed.y.toFixed(2) + suffix;
              }
            }
          }
        }
      }
    });
  }
  
  function toggleChartType(chartName, type) {
    if (chartName === 'projectHours') {
      projectHoursChart.config.type = type;
      projectHoursChart.update();
    } else if (chartName === 'projectEarnings') {
      projectEarningsChart.config.type = type;
      projectEarningsChart.update();
    }
  }
  
  function toggleMetric(metric) {
    currentMetric = metric;
    createTimeSeriesChart();
  }
  
  async function updateCharts() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const projectId = document.getElementById('projectFilter').value;
    
    try {
      const response = await fetch(`/reports/api/chart-data?startDate=${startDate}&endDate=${endDate}&projectId=${projectId}`);
      const data = await response.json();
      
      projectStats = data.projectStats;
      dailyStats = data.dailyStats;
      
      // Update summary cards
      document.getElementById('totalHours').textContent = data.summary.totalHours.toFixed(2);
      document.getElementById('totalEarnings').textContent = '$' + data.summary.totalEarnings.toFixed(2);
      document.getElementById('totalEntries').textContent = data.summary.entriesCount;
      
      // Calculate average hourly rate
      const avgHourly = data.summary.totalEarnings / data.summary.totalHours || 0;
      document.getElementById('avgHourly').textContent = '$' + avgHourly.toFixed(2);
      
      // Recreate charts with new data
      createProjectHoursChart();
      createProjectEarningsChart();
      createTimeSeriesChart();
      
    } catch (error) {
      console.error('Error updating charts:', error);
      alert('Error updating charts. Please try again.');
    }
  }
  
  // Initialize charts when page loads
  document.addEventListener('DOMContentLoaded', function() {
    initCharts();
    
    // Calculate and display average hourly rate
    const totalHours = parseFloat(document.getElementById('totalHours').textContent);
    const totalEarnings = parseFloat(document.getElementById('totalEarnings').textContent.replace('$', ''));
    const avgHourly = totalEarnings / totalHours || 0;
    document.getElementById('avgHourly').textContent = '$' + avgHourly.toFixed(2);
  });
</script>
{{/section}}
